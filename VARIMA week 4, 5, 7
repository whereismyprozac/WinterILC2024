V/ARIMA - Still very much under construction

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
import matplotlib.pyplot as plt

#load csv
data = pd.read_csv(r'C:\Users\hallo\OneDrive\Documents\mindMonitor_2024-2-23-miced.csv')
data['TimeStamp'] = pd.to_datetime(data['TimeStamp'])
data.set_index('TimeStamp', inplace=True)

eeg_data = data['Delta_TP9']

# Split data into training and test sets
train_size = int(len(eeg_data) * 0.8)
train, test = eeg_data[0:train_size], eeg_data[train_size:len(data)]


# Function to evaluate combo of p, d and q values for an ARIMA model
def evaluate_arima_model(order):
    # Add your implementation here
    pass

def evaluate_models(p_values, d_values, q_values):
    best_score, best_order = float('inf'), None
    for p in p_values:
        for d in d_values:
            for q in q_values:
                order = (p,d,q)
                try:
                    rmse = evaluate_arima_model(order)
                    if rmse < best_score:
                        best_score, best_order = rmse, order
                    print('ARIMA%s RMSE=%.3f' % (order,rmse))
                except:
                    continue
    print('Best ARIMA%s RMSE=%.3f' % (best_order, best_score))

# Evaluate parameters
p_values = [0, 1, 2, 4, 6, 8, 10]
d_values = range(0, 3)
q_values = range(0, 3)
evaluate_models(p_values, d_values, q_values)

# Fit an ARIMA model
# The order (p, d, q) of the model should be determined based on the
#specific dataset
model = ARIMA(train, order=(5,1,0))
model_fit = model.fit()

# Make predictions
predictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1, type='levels')

# Calculate RMSE
rmse = sqrt(mean_squared_error(test, predictions))
print(f"RMSE: {rmse: .2f}")

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(test.index, test, label='Actual')
plt.plot(test.index, predictions, label='Predicted', color='red')
plt.xlabel('Timestamp')
plt.ylabel('Delta_TP9')
plt.title('ARIMA Forecasting for Delta_TP9')
plt.legend()
plt.show()

# file_path = r"C:\Users\hallo\mindMonitor_2023-10-31--20-11-02_4625240158191494507\mindMonitor_2023-10-31--20-11-02_4625240158191494507_eeg.fif"
# file_type = 'fif'
# trained_model = train_eeg_model(file_path, file_type)

# print(df.columns)
