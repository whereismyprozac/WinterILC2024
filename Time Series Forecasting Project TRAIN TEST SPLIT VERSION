import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dense, Input
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split#load data


file_path = r'C:\Users\***\OneDrive\Documents\mindMonitor_2023-10-31-updated.csv'
df = pd.read_csv(file_path)#Data preparation/preprocessing
df.dropna(how='all', inplace=True)

# Convert timestamp to Unix
df['TimeStamp'] = pd.to_datetime(df['TimeStamp'].str.lstrip('\\'), format='%Y-%m-%d %H:%M:%S.%f')
df['TimeStamp'] = (df['TimeStamp'] - pd.Timestamp("1970-01-01")) // pd.Timedelta('1s')

# Select columns for analysis (assuming they are numeric)
series = df.iloc[:, 0:36]

# Initialize/apply MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
series_scaled = scaler.fit_transform(series)

# Create dataset for LSTM
def create_dataset(series, time_step):
    X, y = [], []
    for i in range(len(series)-time_step-1):
        a = series[i:(i+time_step), :]
        X.append(a)
        y.append(series[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 100
X, y = create_dataset(series_scaled, time_step)

# Splitting dataset into train and test set
train_size = int(len(X) * 0.67)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Reshape input for LSTM [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], time_step, -1)
X_test = X_test.reshape(X_test.shape[0], time_step, -1)

# Build LSTM model
model = Sequential()
model.add(Input(shape=(5, 36)))
# model.add(LSTM(50, return_sequences=True, input_shape=(time_step, X_train.shape[2])))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Fit model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=64, verbose=1)

# Predictions
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverting predictions
train_predict = scaler.inverse_transform(np.column_stack((train_predict, np.zeros((train_predict.shape[0], series.shape[1]-1)))))
test_predict = scaler.inverse_transform(np.column_stack((test_predict, np.zeros((test_predict.shape[0], series.shape[1]-1)))))

# Calculate RMSE
train_rmse = math.sqrt(mean_squared_error(y_train, train_predict[:,0]))
test_rmse = math.sqrt(mean_squared_error(y_test, test_predict[:,0]))

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(scaler.inverse_transform(series_scaled)[:, 0], label='Original Series')
plt.plot(np.arange(time_step, len(train_predict) + time_step), train_predict[:, 0], label='Training Predictions')
plt.plot(np.arange(len(train_predict) + (2 * time_step) + 1, len(train_predict) + (2 * time_step) + len(test_predict) + 1), test_predict[:, 0], label='Test Predictions')
plt.legend()
plt.show()

print('Train RMSE:', train_rmse)
print('Test RMSE:', test_rmse)
