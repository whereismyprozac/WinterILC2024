#still very much under construction#
#rmse score seems to improve with a switch from TTS to Kfold#
#Train RMSE for fold 1: 0.010480387110425413#
#Test RMSE for fold 1: 0.0112218624495148#
#This is better but it's still a terrible score haha#
import pandas as pd
import numpy as np
import math
import mne
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import LSTM, Dense, Input
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold #train_test_split#load data
# from scipy.signal import butter, lfilter
# from scipy.signal import butter, lfilter
# from braindecode.datautil import create_from_mne_raw

# Load your data into an MNE Raw object
# raw = mne.io.read_raw_edf(file_path, preload=True)
# raw.filter(0.5, 50) 



file_path = r'C:\Users\hallo\mindMonitor_2023-10-31--20-11-02_4625240158191494507\mindMonitor_2023-10-31--20-11-02_4625240158191494507.csv'
df = pd.read_csv(file_path)#Data preparation/preprocessing
df.dropna(how='all', inplace=True)



# Convert timestamp string to Unix timestamp
df['TimeStamp'] = pd.to_datetime(df['TimeStamp'].str.lstrip('\\'), format='%Y-%m-%d %H:%M:%S.%f')
df['TimeStamp'] = (df['TimeStamp'] - pd.Timestamp("1970-01-01")) // pd.Timedelta('1s')

# # Select columns for analysis (assuming they are numeric)
series = df.iloc[:, 0:36]

# # Initialize/apply MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
series_scaled = scaler.fit_transform(series)

# # Create dataset for LSTM
def create_dataset(series, time_step):
    X, y = [], []
    for i in range(len(series)-time_step-1):
        a = series[i:(i+time_step), :]
        X.append(a)
        y.append(series[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 100
X, y = create_dataset(series_scaled, time_step)

#KFOLD VERSION#

# Kfold cross validation
kf = KFold(n_splits=5, shuffle=True, random_state=0)

fold_no = 1
for train, test in kf.split(X, y):
    scaler.fit(X[train].reshape(-1, X.shape[2]))
    X_train_fold = scaler.transform(X[train].reshape(-1, X.shape[2])).reshape(-1, time_step, X.shape[2])
    X_test_fold = scaler.transform(X[test].reshape(-1, X.shape[2])).reshape(-1, time_step, X.shape[2])
    
    y_train_fold = y[train]
    y_test_fold = y[test]

    # Build LSTM model
    model = Sequential()
    model.add(LSTM(50, input_shape=(time_step, X_train_fold.shape[2])))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Fit model
    print(f'Training for fold {fold_no} ...')
    model.fit(X_train_fold, y_train_fold, epochs=100, batch_size=64, verbose=1)

    # Predictions
    train_predict_fold = model.predict(X_train_fold)
    test_predict_fold = model.predict(X_test_fold)
    
    dummy_data_train = np.zeros((train_predict_fold.shape[0], series.shape[1] - 1))
    train_predict_combined = np.hstack((train_predict_fold, dummy_data_train))

    dummy_data_test = np.zeros((test_predict_fold.shape[0], series.shape[1] - 1))
    test_predict_combined = np.hstack((test_predict_fold, dummy_data_test))

    # Inverting predictions to original scale for RMSE calculation
    train_predict_fold = scaler.inverse_transform(train_predict_combined)[:, 0]
    test_predict_fold = scaler.inverse_transform(test_predict_combined)[:, 0]

    # Calculate RMSE
    train_rmse_fold = math.sqrt(mean_squared_error(y_train_fold, train_predict_fold))
    test_rmse_fold = math.sqrt(mean_squared_error(y_test_fold, test_predict_fold))
    
    # Plotting
train_predict = model.predict(X_train_fold)
test_predict = model.predict(X_test_fold)

plt.figure(figsize=(12, 6))
plt.plot(scaler.inverse_transform(series_scaled)[:, 0], label='Original Series')
plt.plot(np.arange(time_step, len(train_predict) + time_step), train_predict[:, 0], label='Training Predictions')
plt.plot(np.arange(len(train_predict) + (2 * time_step) + 1, len(train_predict) + (2 * time_step) + len(test_predict) + 1), test_predict[:, 0], label='Test Predictions')
plt.legend()
plt.show()

# Print RMSE scores for the current fold
print(f'Train RMSE for fold {fold_no}: {train_rmse_fold}')
print(f'Test RMSE for fold {fold_no}: {test_rmse_fold}')
    
fold_no += 1
